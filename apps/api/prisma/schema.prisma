generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  name      String
  role      Role     @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  addresses Address[]
  reviews   Review[]
  orders    Order[]
  wishlists Wishlist[]
  carts     Cart[]

  @@index([email])
}

enum Role {
  USER
  ADMIN
}

model Address {
  id        String  @id @default(cuid())
  userId    String
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  fullName  String
  street    String
  city      String
  state     String
  zipCode   String
  country   String
  phone     String
  isDefault Boolean @default(false)

  orders Order[]

  @@index([userId])
}

model Category {
  id          String    @id @default(cuid())
  name        String    @unique
  slug        String    @unique
  description String?
  imageUrl    String?
  products    Product[]

  @@index([slug])
}

model Brand {
  id          String    @id @default(cuid())
  name        String    @unique
  slug        String    @unique
  description String?
  logoUrl     String?
  products    Product[]

  @@index([slug])
}

model Product {
  id          String   @id @default(cuid())
  name        String
  slug        String   @unique
  description String
  basePrice   Float
  categoryId  String
  category    Category @relation(fields: [categoryId], references: [id])
  brandId     String
  brand       Brand    @relation(fields: [brandId], references: [id])
  gender      Gender
  material    String?
  featured    Boolean  @default(false)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  variants  Variant[]
  images    Image[]
  reviews   Review[]
  wishlists Wishlist[]

  @@index([slug])
  @@index([categoryId])
  @@index([brandId])
  @@index([featured])
  @@index([isActive])
}

enum Gender {
  MEN
  WOMEN
  UNISEX
  KIDS
}

model Variant {
  id              String    @id @default(cuid())
  productId       String
  product         Product   @relation(fields: [productId], references: [id], onDelete: Cascade)
  color           String
  size            String
  sku             String    @unique
  priceAdjustment Float     @default(0)
  images          Image[]
  inventory       Inventory?
  cartItems       CartItem[]
  orderItems      OrderItem[]

  @@index([productId])
  @@index([sku])
}

model Image {
  id        String   @id @default(cuid())
  url       String
  alt       String?
  order     Int      @default(0)
  productId String?
  product   Product? @relation(fields: [productId], references: [id], onDelete: Cascade)
  variantId String?
  variant   Variant? @relation(fields: [variantId], references: [id], onDelete: Cascade)
  reviewId  String?
  review    Review?  @relation(fields: [reviewId], references: [id], onDelete: Cascade)

  @@index([productId])
  @@index([variantId])
  @@index([reviewId])
}

model Inventory {
  id                String   @id @default(cuid())
  variantId         String   @unique
  variant           Variant  @relation(fields: [variantId], references: [id], onDelete: Cascade)
  quantity          Int      @default(0)
  reserved          Int      @default(0)
  lowStockThreshold Int      @default(10)
  updatedAt         DateTime @updatedAt

  @@index([variantId])
}

model Review {
  id        String   @id @default(cuid())
  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  rating    Int
  title     String
  comment   String
  verified  Boolean  @default(false)
  images    Image[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([productId])
  @@index([userId])
}

model Cart {
  id        String     @id @default(cuid())
  userId    String?
  user      User?      @relation(fields: [userId], references: [id], onDelete: Cascade)
  sessionId String?
  items     CartItem[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  @@index([userId])
  @@index([sessionId])
}

model CartItem {
  id        String  @id @default(cuid())
  cartId    String
  cart      Cart    @relation(fields: [cartId], references: [id], onDelete: Cascade)
  variantId String
  variant   Variant @relation(fields: [variantId], references: [id])
  quantity  Int
  price     Float

  @@index([cartId])
  @@index([variantId])
}

model Wishlist {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@unique([userId, productId])
  @@index([userId])
  @@index([productId])
}

model Order {
  id                String        @id @default(cuid())
  userId            String
  user              User          @relation(fields: [userId], references: [id])
  orderNumber       String        @unique
  status            OrderStatus   @default(PENDING)
  paymentStatus     PaymentStatus @default(PENDING)
  paymentIntentId   String?
  subtotal          Float
  tax               Float
  shipping          Float
  discount          Float         @default(0)
  total             Float
  shippingAddressId String
  shippingAddress   Address       @relation(fields: [shippingAddressId], references: [id])
  items             OrderItem[]
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt

  @@index([userId])
  @@index([orderNumber])
  @@index([status])
  @@index([paymentStatus])
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  REFUNDED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
}

model OrderItem {
  id           String  @id @default(cuid())
  orderId      String
  order        Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  variantId    String
  variant      Variant @relation(fields: [variantId], references: [id])
  quantity     Int
  price        Float
  productName  String
  variantColor String
  variantSize  String

  @@index([orderId])
  @@index([variantId])
}

model Banner {
  id        String    @id @default(cuid())
  title     String
  subtitle  String?
  imageUrl  String
  ctaText   String?
  ctaLink   String?
  isActive  Boolean   @default(true)
  order     Int       @default(0)
  startDate DateTime?
  endDate   DateTime?

  @@index([isActive])
  @@index([order])
}

model Coupon {
  id          String     @id @default(cuid())
  code        String     @unique
  type        CouponType
  value       Float
  minPurchase Float?
  maxDiscount Float?
  usageLimit  Int?
  usageCount  Int        @default(0)
  isActive    Boolean    @default(true)
  startDate   DateTime
  endDate     DateTime

  @@index([code])
  @@index([isActive])
}

enum CouponType {
  PERCENTAGE
  FIXED
}
